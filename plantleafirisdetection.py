# -*- coding: utf-8 -*-
"""plantLeafIrisDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12NnuN9o9wXuIwX9zKZwB4sOf9behCSe4

Import libraries
"""

from sklearn.datasets import load_iris
import pandas as pd
import numpy as np

"""Load dataset"""

dataset = load_iris()

"""Summarise dataset"""

print(dataset.data)
print(dataset.target)
print(dataset.data.shape)

"""Segregate into x(independent variable) and y(dependent variable)"""

x = pd.DataFrame(dataset.data, columns = dataset.feature_names)
y = dataset.target
print(x)
print(y)

"""Split data to train and test"""

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.25, random_state=0)
print(x_train.shape)
print(x_test.shape)

"""Find best max_depth value"""

accuracy = []
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

#calculating error for k values between 0 to 40
for i in range(1, 10):
  model = DecisionTreeClassifier(max_depth = i,random_state =0)
  model.fit(x_train, y_train)
  pred = model.predict(x_test)
  score = accuracy_score(y_test, pred)
  accuracy.append(score)

plt.figure(figsize=(12, 6))
plt.plot(range(1, 10), accuracy, color ='red', linestyle = 'dashed', marker = 'o', markerfacecolor='blue', markersize = 12)
plt.title("Finding best max_depth")
plt.xlabel('Pred')
plt.ylabel('Score')

"""Training"""

from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier(criterion = 'entropy', max_depth = 3, random_state = 0)
model.fit(x_train, y_train)

"""Prediction"""

y_pred = model.predict(x_test)
print(np.concatenate((y_pred.reshape(len(y_pred), 1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import accuracy_score
print("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_pred)*100))

